{"version":3,"sources":["angular-dropbox.js"],"names":["angular","dropularConfigProvider","DEFAULT_CONFIGURATION","getConfig","provider","options","$log","setConfig","configuration","arguments","length","undefined","tokenProvided","isObject","isUndefined","error","isDefined","accessToken","isString","clientId","extend","debug","this","config","service","$location","$dropularConfig","upload","init","callback","dropbox","factory","Dropbox","dropularFactory","link","scope","delay","dropularAuthButtonDirective","$timeout","directive","elem","module","restrict","$inject","constant","selectUser"],"mappings":"cAaA,SACWA,GAST,QAASC,GAAwBC,GAkBhC,QAASC,KAAT,MAAAC,GAASD,QASDC,EAASC,SAPhBC,EAAMF,MAASC,+BAGP,GAaT,QAASE,KAAgC,GAAAC,GAAAC,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,MAEpCG,GAAgB,CAIpB,QAAMZ,EAAQa,SAAUL,IAAmBR,EAAQc,YAAaN,OAE/DF,GAAKS,MAAO,qCAKbH,EAAgBZ,EAAQgB,UAAWR,EAAcS,cAAiBjB,EAAQkB,SAAUV,EAAcS,aAC/EjB,EAAQgB,UAAWR,EAAcW,WAAcnB,EAAQkB,SAAUV,EAAcW,WAEtEP,GAO5BR,EAASC,QAAUL,EAAQoB,OAAQf,EAASG,IAEV,KAA3BJ,EAASC,QAAQgB,OAGxBf,EAAOF,MAAAA,wBAAPA,EAAAC,SAAOD,EAASC,aAVfC,GAAKS,MAAO,4EAtDf,GAAAT,GAASL,EAAAA,UAAwBC,OAAAA,IAAAA,QAK5BE,EAAWkB,IADflB,GAAAC,WACAD,EAAIA,OAAJG,EACAH,EAASC,UAATE,EACAH,EAASmB,UAAShB,CAKlB,IAAIF,GAAUH,CAsEd,OAPCsB,GAAQjB,KAAAA,WADR,GAAIiB,KAQL,OAJCA,GAAOA,UAAPjB,EANDiB,EAAArB,UAAAA,EAUOC,GAAAA,EA6BuC,QAA/BI,GAA+BF,EAX9CmB,EACAC,GAGA,QAASC,MAOT,QAASC,KAAqC,GAA/BpB,GAA+BC,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,MAAXoB,EAAWpB,UAAA,GAiB7CJ,EAAAqB,EAAAnB,UAAAC,GAdGsB,MAAAA,EAYH,OAMDC,KAEAD,EAAOC,GAAPC,SAAA3B,GAb0B,kBAAbwB,IAiBdI,EAAAA,IAZSH,EA2BT,GAAAC,KAOE,OA7BDA,GAAQH,KAAOA,EA2BfG,EAASG,OAAMC,EAEVC,EAmBJf,QAAOgB,GACPD,EAJDE,GAQA,QAAOC,GAAPJ,EAAAK,GAxBC,GAAIJ,GAAQD,EAAMC,MAAQD,EAAMC,MAAQ,EA4B1CC,GA1BIpB,YAAakB,EAAMlB,YAAckB,EAAMlB,YAAc,GAkCzDE,SAAAgB,EAAAhB,SAAAgB,EAAAhB,SAAA,GACAnB,QACEyC,EAAQpB,OADVc,EAEE/B,MAeDJ,OANEqB,GAAOA,MAAAb,EAAA4B,GA1NZE,EAAA,WAAA,MAAAE,IAAAJ,GAwLG,GAAIG,KAUJ,OATAA,GAAUG,SAAW,IACrBH,EAAUJ,OACTlB,YAAa,uBACbE,SAAU,oBACVE,MAAO,iBACPe,MAAO,kBAERG,EAAUL,KAAOA,EAEVK,EAlGRtC,EACE0C,SAWF,yBAkEItB,EAJFsB,SApBA,OA4BArC,YA1BA,mBA8CF+B,EACEM,SACA,OACA,YAMF3C,EACEyC,OAAQ,eACRrC,SAAU,kBAAmBH,GAC7B8B,QAAS,WAAYE,GACrBM,UAAW,qBAAsBF,GACjCO,SACA,yBAEC3B,YAAa,GACbE,aAAUR,GACVkC,eAAYlC,GACZU,OAAO,KAMTrB","file":"angular-dropbox.min.js","sourcesContent":["/*\n*  Dropbox Wrapper for AngularJs @dropular\n*  API @ http://angular-dropbox.github.io/\n*\n*  Dropular is a service that permit to comunicate with the new Dropbox API.\n* Manteined by @studiomado @luxdamore\n*\n* Dropbox links\n* \t- App creation: https://www.dropbox.com/developers/apps/create\n*\t- Api explorer: https://dropbox.github.io/dropbox-api-v2-explorer/\n*\n*/\n\n(\n\tfunction( angular ) {\n\n\t\t'use strict';\n\n\t\t/**\n\t\t* @function dropularConfigProvider\n\t\t* @param  {angularProvider} $logProvider { Only used for debugging purpose }\n\t\t* @return {object} { Provider && Services Configurator }\n\t\t*/\n\t\tfunction dropularConfigProvider( DEFAULT_CONFIGURATION ) {\n\n\t\t\tconst $log = angular.injector( [ 'ng' ] ).get( '$log' );\n\n\t\t\t// Provider\n\t\t\tlet provider = this;\n\t\t\tprovider.options = {};\n\t\t\tprovider.config = setConfig;\n\t\t\tprovider.setConfig = setConfig;\n\t\t\tprovider.getConfig = getConfig;\n\n\t\t\t// Default options\n\t\t\tlet options = DEFAULT_CONFIGURATION;\n\n\t\t\t/**\n\t\t\t* @function getConfig\n\t\t\t* @return {object} { Actual configuration }\n\t\t\t*/\n\t\t\tfunction getConfig() {\n\n\t\t\t\tif( ! provider.options ) {\n\n\t\t\t\t\t$log.error( 'No configuration provided.' );\n\t\t\t\t\treturn false;\n\n\t\t\t\t};\n\n\t\t\t\treturn provider.options;\n\n\t\t\t};\n\n\t\t\t/**\n\t\t\t* @function setConfig\n\t\t\t* @param {object} configuration { the configuration for your droprox API }\n\t\t\t* @return {bool} { if everything goes fine }\n\t\t\t*/\n\t\t\tfunction setConfig( configuration = {} ) {\n\n\t\t\t\tlet tokenProvided = true\n\t\t\t\t\t, clientIdProvided = true\n\t\t\t\t;\n\n\t\t\t\tif( ! angular.isObject( configuration ) || angular.isUndefined( configuration ) ) {\n\n\t\t\t\t\t$log.error( 'Configuration must be an object.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t};\n\n\t\t\t\ttokenProvided = angular.isDefined( configuration.accessToken ) && angular.isString( configuration.accessToken );\n\t\t\t\tclientIdProvided = angular.isDefined( configuration.clientId ) && angular.isString( configuration.clientId );\n\n\t\t\t\tif( ! clientIdProvided && ! tokenProvided ) {\n\n\t\t\t\t\t$log.error( 'accessToken or clienId must be provided and must be a non-empty string.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t};\n\n\t\t\t\tprovider.options = angular.extend( options, configuration );\n\n\t\t\t\tif( !! provider.options.debug === true )\n\t\t\t\t\t$log.debug( 'Configuration changed', provider.options );\n\n\t\t\t\treturn provider.options;\n\n\t\t\t};\n\n\t\t\t/**\n\t\t\t* @function $get\n\t\t\t* @return {angularServices} { The services for this provider }\n\t\t\t*/\n\t\t\tprovider.$get = () => {\n\n\t\t\t\tlet service = {};\n\t\t\t\tservice.setConfig = setConfig;\n\t\t\t\tservice.getConfig = getConfig;\n\n\t\t\t\treturn service;\n\n\t\t\t};\n\n\t\t\treturn provider;\n\n\t\t};\n\n\t\tdropularConfigProvider\n\t\t\t.$inject = [\n\t\t\t\t'DEFAULT_CONFIGURATION',\n\t\t\t]\n\t\t;\n\n\n\t\t/**\n\t\t* @function dropularFactory\n\t\t* @param  {angularProvider} $log { Only used for debugging purpose }\n\t\t* @return {angularFactory} { Factory }\n\t\t*/\n\t\tfunction dropularFactory(\n\t\t\t$log,\n\t\t\t$location,\n\t\t\t$dropularConfig\n\t\t) {\n\n\t\t\tfunction upload() {};\n\n\t\t\t/**\n\t\t\t* @function init\n\t\t\t* @param  {type} configuration = {} { Create new Dropbox instance }\n\t\t\t* @return {type} { Dropbox instance }\n\t\t\t*/\n\t\t\tfunction init( configuration = {}, callback ) {\n\n\t\t\t\tlet options = $dropularConfig.setConfig( configuration )\n\t\t\t\t\t, dropbox\n\t\t\t\t;\n\n\t\t\t\tif( options ) {\n\n\t\t\t\t\tdropbox = new Dropbox( options );\n\n\t\t\t\t\tif( typeof callback === 'function' )\n\t\t\t\t\t\tcallback( dropbox );\n\n\t\t\t\t};\n\n\t\t\t\treturn dropbox;\n\n\t\t\t};\n\n\t\t\tlet factory = {};\n\t\t\tfactory.init = init;\n\t\t\tfactory.upload = upload;\n\n\t\t\treturn factory;\n\n\t\t};\n\n\t\tdropularFactory\n\t\t\t.$inject = [\n\t\t\t\t'$log',\n\t\t\t\t'$location',\n\t\t\t\t'$dropularConfig'\n\t\t\t]\n\t\t;\n\n\n\t\t/**\n\t\t* @function dropularAuthButtonDirective\n\t\t* @param  {angularProvider} $log { Only used for debugging purpose }\n\t\t* @param  {angularProvider} $timeout { Used for Delayed statup }\n\t\t* @return {angularDirective} { Directive }\n\t\t*/\n\t\tfunction dropularAuthButtonDirective(\n\t\t\t$log,\n\t\t\t$timeout\n\t\t) {\n\n\t\t\tfunction link( scope, elem ) {\n\n\t\t\t\tlet delay = scope.delay ? scope.delay : 0\n\t\t\t\t\t, configuration = {\n\t\t\t\t\t\taccessToken: scope.accessToken ? scope.accessToken : '',\n\t\t\t\t\t\tclientId: scope.clientId ? scope.clientId : '',\n\t\t\t\t\t\tdebug: scope.debug ? scope.debug : false,\n\t\t\t\t\t}\n\t\t\t\t;\n\n\t\t\t\t$log.debug( configuration, delay );\n\n\t\t\t\treturn $timeout( () => elem, delay );\n\n\t\t\t};\n\n\t\t\tlet directive = {};\n\t\t\tdirective.restrict = 'A';\n\t\t\tdirective.scope = {\n\t\t\t\taccessToken: \"@dropularAccessToken\",\n\t\t\t\tclientId: \"@dropularClientId\",\n\t\t\t\tdebug: \"@dropularDebug\",\n\t\t\t\tdelay: \"=dropularDelay\",\n\t\t\t};\n\t\t\tdirective.link = link;\n\n\t\t\treturn directive;\n\n\t\t};\n\n\t\tdropularAuthButtonDirective\n\t\t\t.$inject = [\n\t\t\t\t'$log',\n\t\t\t\t'$timeout',\n\t\t\t]\n\t\t;\n\n\n\t\t// Main Module\n\t\tangular\n\t\t\t.module( 'dropular', [] )\n\t\t\t.provider( '$dropularConfig', dropularConfigProvider )\n\t\t\t.factory( 'Dropular', dropularFactory )\n\t\t\t.directive( 'dropularAuthButton', dropularAuthButtonDirective )\n\t\t\t.constant(\n\t\t\t\t'DEFAULT_CONFIGURATION',\n\t\t\t\t{\n\t\t\t\t\taccessToken: '',\n\t\t\t\t\tclientId: undefined,\n\t\t\t\t\tselectUser: undefined,\n\t\t\t\t\tdebug: false,\n\t\t\t\t}\n\t\t\t)\n\t\t;\n\n\t}\n)( angular );\n"]}